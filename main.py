import asyncio
import logging
import psycopg2
import re
import telebot
from telebot.async_telebot import AsyncTeleBot
import datetime

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

bot = AsyncTeleBot('6942842247:AAGliFh74a5cKTCeFQ3TY_1VxgaZpbAbrUs')

try:
    conn = psycopg2.connect(
        dbname="luk",
        user="postgres",
        password="admin",
        host="localhost",
        port="5432"
    )
    cur = conn.cursor()
except Exception as e:
    logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %s", e)

user_state = {}

async def userregistration(message):
    try:
        markup = telebot.types.ReplyKeyboardRemove()
        await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —á–∞—Ç –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", reply_markup=markup)
        user_state[message.chat.id] = {'–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã': True}
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message: message.chat.id in user_state and user_state[message.chat.id].get('–û–∂–∏–¥–∞–Ω–∏–µ_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'))
async def notifications1(message):
    try:
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∑–∞ —á–∞—Å, –∑–∞ –¥–µ–Ω—å, –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å, –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        notif_text = message.text.strip().lower()
        if notif_text not in ['–∑–∞ –¥–µ–Ω—å', '–∑–∞ —á–∞—Å', '–∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å', '–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π']:
            await bot.send_message(message.chat.id,
                                   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
        user_state[message.chat.id]['notif'] = notif_text
        user_id = message.from_user.id
        p_group = user_state[message.chat.id]['group']
        p_notif = user_state[message.chat.id]['notif']

        cur.execute("INSERT INTO people (id_p, unicours, notif) VALUES (%s, %s, %s)", (user_id, p_group, p_notif))
        conn.commit()
        user_state[message.chat.id]['–û–∂–∏–¥–∞–Ω–∏–µ_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'] = False

        await bot.send_message(message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!")
        await mainmenu(message)
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(commands=['start', 'menu'])
async def start(message) :
    try :
        user_id = message.from_user.id
        cur.execute("SELECT * FROM people WHERE id_p = %s", (user_id,))
        user_data = cur.fetchone()

        if user_data :
            await mainmenu(message)
        else :
            await userregistration(message)
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message: message.chat.id in user_state and user_state[message.chat.id].get('–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã'))
async def firstgroup(message):
    try :
        group_name = message.text.strip()
        if not await validate_format(group_name) :
            await bot.send_message(message.chat.id,
                                   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. (–ù–∞–ø—Ä–∏–º–µ—Ä –ò–°–ü–∫-201-51-00). –ü—Ä–∏ –≤–≤–æ–¥–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ø–∏—Å—ã–≤–∞–π—Ç–µ –Ω—É–ª–∏.")
            return
        user_state[message.chat.id]['group'] = group_name
        user_state[message.chat.id]['–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã'] = False
        user_state[message.chat.id]['–û–∂–∏–¥–∞–Ω–∏–µ_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'] = True
        await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è(–∑–∞ –¥–µ–Ω—å, –∑–∞ —á–∞—Å, –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –∏–ª–∏ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π).")
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

async def validate_format(group_name):
    pattern = r'^[–ê-–Ø–Å–∞-—è—ë]{3,4}-[0-9]{3}-[0-9]{2}-[0-9]{2}$'
    return re.match(pattern, group_name) is not None

async def mainmenu(message):
    try :
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        lessons_button = telebot.types.KeyboardButton('üìñ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        settings_button = telebot.types.KeyboardButton('‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        find_teacher_button = telebot.types.KeyboardButton('üë®üèª‚Äçüíº–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        help_button = telebot.types.KeyboardButton('üÜò–ü–æ–º–æ—â—å')
        markup.add(lessons_button, settings_button)
        markup.add(find_teacher_button, help_button)
        await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message: message.text.lower() == 'üóì–º–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def findgroupschedule(message):
    try :
        user_id = message.from_user.id
        group_name = await getusergroup(user_id)
        if group_name :
            await sendgroupschedule(message.chat.id, group_name)
        else :
            await bot.send_message(message.chat.id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

async def getusergroup(user_id):
    try :
        cur.execute("SELECT unicours FROM people WHERE id_p = %s", (user_id,))
        group_name = cur.fetchone()
        return group_name[0] if group_name else None
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

async def searchgroupschedule(group_name):
    try :
        cur.execute("SELECT id_group FROM groups WHERE name_group LIKE %s", (f"%{group_name}%",))
        group_ids = cur.fetchall()
        if group_ids :
            schedule_rows = []
            for group_id in group_ids :
                cur.execute("""
                        SELECT
                            schedule.day_of_week_and_date,
                            schedule.time_range,
                            disciplines.name_discipline,
                            schedule.lesson_type,
                            teachers.full_name,
                            audiences.room_number
                        FROM
                            schedule
                            JOIN disciplines ON schedule.id_discipline = disciplines.id_discipline
                            JOIN teachers ON schedule.id_teacher = teachers.id_teacher
                            JOIN audiences ON schedule.id_audience = audiences.id_audience
                        WHERE
                            schedule.id_group = %s
                    """, (group_id[0],))
                schedule_rows.extend(cur.fetchall())
            return schedule_rows
        else :
            return None
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

async def sendgroupschedule(chat_id, group_name):
    try :
        await bot.send_message(chat_id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ.")
        group_schedule = await searchgroupschedule(group_name)
        if group_schedule :
            response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã(-—ã) '{group_name}':\n"
            for row in group_schedule :
                response += f"------------------------------------------------------------\n"
                response += f"üìÖ {row[0]}\n"
                response += f"üïí {row[1]}\n"
                if row[2] != "!" :
                    response += f"üìö {row[2]}\n"
                if row[3] != "." and row[3] != "!" :
                    response += f"üß™ {row[3]}\n"
                if row[4] != "!" :
                    response += f"üë®üèª‚Äçüíº {row[4]}\n"
                if row[5] != "!" :
                    response += f"üèõ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {row[5]}\n"

            for i in range(0, len(response), 4000) :
                await bot.send_message(chat_id, response[i :i + 4000])
        else :
            await bot.send_message(chat_id,
                                   f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø(-—ã) —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{group_name}', –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

async def send_notif_za_den(chat_id, group_name):
    await bot.send_message(chat_id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    group_schedule = await searchgroupschedule(group_name)
    if group_schedule:
        current_time = datetime.datetime.now()
        if current_time.hour == 18 and current_time.minute == 1:
            current_day = current_time.weekday()
            if current_day == 5:
                next_day = 0
            else:
                next_day = (current_day + 1) % 7

            days_of_week = [
                "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
                "–í–¢–û–†–ù–ò–ö",
                "–°–†–ï–î–ê",
                "–ß–ï–¢–í–ï–†–ì",
                "–ü–Ø–¢–ù–ò–¶–ê",
                "–°–£–ë–ë–û–¢–ê",
                "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"
            ]
            next_day_name = days_of_week[next_day]
            response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã(-—ã) '{group_name}' –Ω–∞ {next_day_name}:\n"
            for row in group_schedule:
                if next_day_name in row[0].upper():
                    response += f"------------------------------------------------------------\n"
                    response += f"üìÖ {row[0]}\n"
                    response += f"üïí {row[1]}\n"
                    if row[2] != "!":
                        response += f"üìö {row[2]}\n"
                    if row[3] != "." and row[3] != "!":
                        response += f"üß™ {row[3]}\n"
                    if row[4] != "!":
                        response += f"üë®üèª‚Äçüíº {row[4]}\n"
                    if row[5] != "!":
                        response += f"üèõ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {row[5]}\n"
            if next_day_name not in response:
                await bot.send_message(chat_id, f"–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}' –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {next_day_name}.")
            else:
                for i in range(0, len(response), 4000):
                    await bot.send_message(chat_id, response[i:i + 4000])
        else:
            pass
    else:
        await bot.send_message(chat_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø(-—ã) —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{group_name}', –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def send_notif_za_chas(chat_id, group_name):
    try:
        await bot.send_message(chat_id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        group_schedule = await searchgroupschedule(group_name)
        if not group_schedule:
            await bot.send_message(chat_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø(-—ã) —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{group_name}', –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        current_time = datetime.datetime.now()
        days_of_week = [
            "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
            "–í–¢–û–†–ù–ò–ö",
            "–°–†–ï–î–ê",
            "–ß–ï–¢–í–ï–†–ì",
            "–ü–Ø–¢–ù–ò–¶–ê",
            "–°–£–ë–ë–û–¢–ê",
            "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"
        ]
        found_classes = False
        current_day = current_time.weekday()
        next_day = (current_day) % 7
        current_day_name = days_of_week[next_day]
        for row in group_schedule:
            if current_day_name in row[0].upper():
                response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã(-—ã) '{group_name}' –Ω–∞ {current_day_name}:\n"
                response += f"------------------------------------------------------------\n"
                response += f"üìÖ {row[0]}\n"
                response += f"üïí {row[1]}\n"
                response += f"üìö {row[2]}\n" if row[2] != "!" else ""
                response += f"üß™ {row[3]}\n" if row[3] != "." and row[3] != "!" else ""
                response += f"üë®üèª‚Äçüíº {row[4]}\n" if row[4] != "!" else ""
                response += f"üèõ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {row[5]}\n" if row[5] != "!" else ""
                await bot.send_message(chat_id, response)
                found_classes = True
        if not found_classes:
            await bot.send_message(chat_id, f"–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}' –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {current_day_name}.")
        else:
            pass
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message : message.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', )
async def settings(message) :
    try :
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        changegr = telebot.types.KeyboardButton('üë®üèª‚Äçüéì–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
        changentf = telebot.types.KeyboardButton('üîî–°–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        menu = telebot.types.KeyboardButton('/menu')
        markup.add(changegr, changentf)
        markup.add(menu)
        await bot.send_message(message.chat.id, '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å?', reply_markup=markup)
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message: message.text == 'üë®üèª‚Äçüéì–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
async def chnge_uni(message):
    try :
        await bot.send_message(message.chat.id,
                               '–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–°–ü–∫-201-51-00). –ü—Ä–∏ –≤–≤–æ–¥–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ø–∏—Å—ã–≤–∞–π—Ç–µ –Ω—É–ª–∏.')
        user_state[message.chat.id] = {'–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã1' : True}
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message: True and user_state[message.chat.id].get('–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã1'))
async def thewaiting(message):
    try :
        group_name = message.text.strip()
        pattern = r'^[–ê-–Ø–Å–∞-—è—ë]{3,4}-[0-9]{3}-[0-9]{2}-[0-9]{2}$'
        if re.match(pattern, group_name) :
            await chnge_uni1(message, group_name)
            del user_state[message.chat.id]['–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã1']
        else :
            await bot.send_message(message.chat.id,
                                   '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.')
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

async def chnge_uni1(message, group_name):
    try :
        user_id = message.from_user.id
        p_group = group_name
        cur.execute("UPDATE people SET unicours = %s WHERE id_p = %s", (p_group, user_id))
        conn.commit()
        await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message: message.text == 'üîî–°–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def notifications(message):
    try :
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        onehour = telebot.types.KeyboardButton('–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —á–∞—Å –¥–æ')
        oneday = telebot.types.KeyboardButton('–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ')
        hourday = telebot.types.KeyboardButton('–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ')
        stopall = telebot.types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
        menu = telebot.types.KeyboardButton('/menu')
        markup.add(onehour, oneday)
        markup.add(hourday, stopall)
        markup.add(menu)
        await bot.send_message(message.chat.id, '''–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –£—á—Ç–∏—Ç–µ —ç—Ç–æ!''', reply_markup=markup)
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message : message.text in ['–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —á–∞—Å –¥–æ', '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ', '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ', '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'])
async def handle_notifications(message) :
    try :
        notification_types = {
            '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —á–∞—Å –¥–æ' : '–∑–∞ —á–∞—Å',
            '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ' : '–∑–∞ –¥–µ–Ω—å',
            '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ' : '–∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å',
            '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        }
        notification_type = message.text
        notification_text = notification_types.get(notification_type)
        if notification_text is None :
            await bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return

        user_state[message.chat.id] = {'notif' : notification_text}
        await update_notifindb(message)
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

async def update_notifindb(message) :
    try :
        user_id = message.from_user.id
        p_notif = user_state[message.chat.id]['notif']
        cur.execute("UPDATE people SET notif = %s WHERE id_p = %s", (p_notif, user_id))
        conn.commit()
        await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–º–µ–Ω–∏–ª–∏ —Å–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except Exception as e :
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message: message.text == 'üìñ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def lessons(message):
    try :
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        my_lessons = telebot.types.KeyboardButton('üóì–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        all_lessons = telebot.types.KeyboardButton('üìö–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞')
        back_to_menu = telebot.types.KeyboardButton('/menu')
        markup.add(my_lessons, all_lessons)
        markup.add(back_to_menu)
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup)
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

async def searchteacher(lastname) :
    try :
        cur.execute("SELECT id_teacher FROM teachers WHERE full_name LIKE %s", (f"%{lastname}%",))
        teacher_id = cur.fetchone()
        if teacher_id :
            cur.execute("""
                    SELECT
                        groups.name_group,
                        schedule.day_of_week_and_date,
                        schedule.time_range,
                        disciplines.name_discipline,
                        schedule.lesson_type,
                        audiences.room_number
                    FROM
                        schedule
                        JOIN groups ON schedule.id_group = groups.id_group
                        JOIN disciplines ON schedule.id_discipline = disciplines.id_discipline
                        JOIN audiences ON schedule.id_audience = audiences.id_audience
                    WHERE
                        schedule.id_teacher = %s
                """, (teacher_id[0],))
            schedule_rows = cur.fetchall()
            return schedule_rows
        else :
            return None
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message : message.text == 'üë®üèª‚Äçüíº–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
async def find_teacher(message) :
    try :
        user_state[message.chat.id] = {'waiting_for_lastname' : True}
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(
    func=lambda message : message.chat.id in user_state and user_state[message.chat.id].get('waiting_for_lastname'))
async def teachername(message) :
    try :
        teacher_lastname = message.text
        if teacher_lastname == "!" :
            await bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            del user_state[message.chat.id]
            return
        teacher_lastname = message.text
        teacher_schedule = await  searchteacher(teacher_lastname)
        if teacher_schedule :
            response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_lastname}:\n"
            for row in teacher_schedule :
                response += f"------------------------------------------------------------\nüë´ {row[0]}\n"
                response += f"üìÖ {row[1]}\n"
                response += f"üïí–í—Ä–µ–º—è: {row[2]}\n"
                response += f"üìö–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {row[3]}\n"
                if row[4] != "." :
                    response += f"üß™–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {row[4]}\n"
                response += f"üèõ–ê—É–¥–∏—Ç–æ—Ä–∏—è: {row[5]}\n"

            for i in range(0, len(response), 4000):
                await bot.send_message(message.chat.id, response[i :i + 4000])
        else :
            await bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            del user_state[message.chat.id]
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message : message.text == 'üÜò–ü–æ–º–æ—â—å')
async def help(message) :
    await bot.send_message(message.chat.id,
                           f''' ‚ùó –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –±–æ—Ç–∞.
ü§ñ–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
–í —Ä–∞–∑–¥–µ–ª–µ \"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìñ\" –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â—É—é \"–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\".
\"–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì\" —è–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –≤–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.
–ö–Ω–æ–ø–∫–∞ \"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®üèª‚Äçüíº\" –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ –§–ò–û.
–í —Ä–∞–∑–¥–µ–ª–µ \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è\" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–Ω–æ–ø–∫–∏, –∏–∑–º–µ–Ω—è—é—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É, –∏–∑–º–µ–Ω—è—é—â–∏–µ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
–í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–µ–¥–µ–ª—è —Å–º–µ–Ω—è–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–Ω–µ—à—Ç–∞—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∞–º–∏ –≥—Ä—É–ø–ø—É.
üéâ –£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!''')

@bot.message_handler(func=lambda message: True)
async def handle_messages(message):
    try :
        if message.text not in ['üìñ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üë®üèª‚Äçüíº–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', 'üÜò–ü–æ–º–æ—â—å', 'üóì–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                                'üìö–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞', 'üë®üèª‚Äçüéì–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', '‚ÜîÔ∏è–°–º–µ–Ω–∏—Ç—å –Ω–µ–¥–µ–ª—é –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é',
                                '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —á–∞—Å –¥–æ', '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ', '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ',
                                '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'] :
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            lessons0 = telebot.types.KeyboardButton('üìñ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
            settings0 = telebot.types.KeyboardButton('‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
            findname0 = telebot.types.KeyboardButton('üë®üèª‚Äçüíº–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            help0 = telebot.types.KeyboardButton('üÜò–ü–æ–º–æ—â—å')
            markup.add(lessons0, settings0)
            markup.add(findname0, help0)
            await bot.send_message(message.chat.id,
                                   "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
                                   reply_markup=markup)
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

@bot.message_handler(func=lambda message: True)
async def findgroupnotif(message):
    cur.execute("SELECT id_p FROM people")
    user_id2 = cur.fetchone()
    group_name = await getusergroupnotif(user_id2)
    if group_name:
        await send_notif_za_den(message.chat.id, group_name)
    else:
        pass
    return user_id2[0] if user_id2 else None

async def getusergroupnotif(user_id2):
    cur.execute("SELECT unicours FROM people WHERE id_p = %s", (user_id2,))
    group_name = cur.fetchone()
    return group_name[0] if group_name else None

async def send_notif(interval_seconds):
        while True :
            cur.execute("SELECT id_p FROM people")
            user_id = cur.fetchone()
            cur.execute("SELECT notif FROM people WHERE id_p = %s", (user_id,))
            notifs = cur.fetchall()
            if not notifs == "–∑–∞ –¥–µ–Ω—å" or not notifs == "–∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å" :
                await asyncio.sleep(50)
            current_time = datetime.datetime.now()
            if current_time.hour == 18 and current_time.minute == 1 :
                cur.execute("SELECT id_p FROM people")
                user_ids = cur.fetchall()
                for user_id in user_ids :
                    group_name = await getusergroupnotif(user_id)
                    if group_name :
                        await send_notif_za_den(user_id[0], group_name)
            await asyncio.sleep(interval_seconds)


@bot.message_handler(func=lambda message: True)
async def find_group_notif2(message):
    try:
        cur.execute("SELECT id_p FROM people")
        user_id2 = cur.fetchone()
        group_name = await get_user_group_notif2(user_id2)
        if group_name:
            await send_notif_za_chas(message.chat.id, group_name)
        else:
            pass
        return user_id2[0] if user_id2 else None
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)

async def get_user_group_notif2(user_id2):
    try:
        cur.execute("SELECT unicours FROM people WHERE id_p = %s", (user_id2,))
        group_name = cur.fetchone()
        return group_name[0] if group_name else None
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)



async def send_notif2(interval_seconds) :
    try :
            while True :
                cur.execute("SELECT id_p FROM people")
                user_id = cur.fetchone()
                cur.execute("SELECT notif FROM people WHERE id_p = %s", (user_id,))
                notifs = cur.fetchall()
                if not notifs == "–∑–∞ —á–∞—Å" or not notifs == "–∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å" :
                    await asyncio.sleep(50)
                current_time = datetime.datetime.now()
                if current_time.strftime("%H:%M") in ["7:20", "9:00", "10:45", "13:00", "14:45", "16:20", "17:55",
                                                      "12:20",
                                                      "13:55", "15:30"] :
                    cur.execute("SELECT id_p FROM people")
                    user_ids = cur.fetchall()
                    for user_id in user_ids :
                        group_name = await get_user_group_notif2(user_id)
                        if group_name :
                            await send_notif_za_chas(user_id[0], group_name)
                await asyncio.sleep(interval_seconds)
    except Exception as e :
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s", e)


async def main():
    try:
        interval_seconds = 50
        asyncio.ensure_future(send_notif(interval_seconds))
        asyncio.ensure_future(send_notif2(interval_seconds))
        await bot.polling(none_stop=True)
    except Exception as e:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: %s", e)

if __name__ == "__main__":
    asyncio.run(main())