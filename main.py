import asyncio
import psycopg2
import telebot
import re
from telebot.async_telebot import AsyncTeleBot

# –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —É BotFather –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = AsyncTeleBot('6942842247:AAGliFh74a5cKTCeFQ3TY_1VxgaZpbAbrUs')

conn = psycopg2.connect(
        dbname="luk",
        user="postgres",
        password="admin",
        host="localhost",
        port="5432"
    )

cur = conn.cursor()

user_state = {}


# @bot.message_handler(commands=['start', 'menu'])
# async def first_start(message):
#     username = message.from_user.first_name
#     user_state[message.chat.id] = {'–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã': True, 'group': None, 'notif': None}
#     await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {username}! –Ø —á–∞—Ç –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É")

@bot.message_handler(
    func=lambda message: message.chat.id in user_state and user_state[message.chat.id].get('–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã'))
async def firstgroup(message):
    group_name = message.text.strip()
    if not validate_group_format(group_name):
        await bot.send_message(message.chat.id,
                               "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. (–ù–∞–ø—Ä–∏–º–µ—Ä –ò–°–ü–∫-201-51-00). –ü—Ä–∏ –≤–≤–æ–¥–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ø–∏—Å—ã–≤–∞–π—Ç–µ –Ω—É–ª–∏.")
        return
    user_state[message.chat.id]['group'] = group_name
    user_state[message.chat.id]['–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã'] = False
    user_state[message.chat.id]['–û–∂–∏–¥–∞–Ω–∏–µ_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'] = True
    await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
async def validate_group_format(group_name) :
    pattern = r'^[–ê-–Ø–Å–∞-—è—ë]{3,4}\-[0-9]{3}\-[0-9]{2}\-[0-9]{2}$'  # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≥—Ä—É–ø–ø—ã
    return re.match(pattern, group_name) is not None
@bot.message_handler(commands=['start', 'menu'])
async def handle_start(message) :
    user_id = message.from_user.id
    cur.execute("SELECT * FROM people WHERE id_p = %s", (user_id,))
    user_data = cur.fetchone()

    if user_data :
        await send_main_menu(message.chat.id)
    else :
        await new_user_registration(message.chat.id)


async def send_main_menu(chat_id) :
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    lessons_button = telebot.types.KeyboardButton('üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    settings_button = telebot.types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    find_teacher_button = telebot.types.KeyboardButton('üë®üèª‚Äçüíº –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
    help_button = telebot.types.KeyboardButton('üÜò –ü–æ–º–æ—â—å')
    markup.add(lessons_button, settings_button)
    markup.add(find_teacher_button, help_button)
    await bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

async def new_user_registration(chat_id) :
    markup = telebot.types.ReplyKeyboardRemove()
    await bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —á–∞—Ç –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:",
                           reply_markup=markup)
    user_state[chat_id] = {'–û–∂–∏–¥–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã' : True}

@bot.message_handler(
    func=lambda message : message.chat.id in user_state and user_state[message.chat.id].get('–û–∂–∏–¥–∞–Ω–∏–µ_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'))
async def notifications1(message) :
    notif_text = message.text.strip().lower()
    if notif_text not in ['–∑–∞ –¥–µ–Ω—å', '–∑–∞ —á–∞—Å', '–∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å', '–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'] :
        await bot.send_message(message.chat.id,
                               "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    user_state[message.chat.id]['notif'] = notif_text
    user_id = message.from_user.id
    p_group = user_state[message.chat.id]['group']
    p_notif = user_state[message.chat.id]['notif']
    cur.execute("INSERT INTO people (id_p, unicours, notif) VALUES (%s, %s, %s)", (user_id, p_group, p_notif))
    conn.commit()
    await bot.send_message(message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!")
    await send_main_menu(message.chat.id)









@bot.message_handler(func=lambda message: message.text == 'üóì–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def find_group_schedule(message):
    user_id = message.from_user.id
    group_name = await get_user_group(user_id)
    if group_name:
        await send_group_schedule(message.chat.id, group_name)
    else:
        await bot.send_message(message.chat.id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def get_user_group(user_id):
    cur.execute("SELECT unicours FROM people WHERE id_p = %s", (user_id,))
    group_name = cur.fetchone()
    return group_name[0] if group_name else None

async def search_group_schedule(group_name):
    cur.execute("SELECT id_group FROM groups WHERE name_group LIKE %s", (f"%{group_name}%",))
    group_ids = cur.fetchall()
    if group_ids:
        schedule_rows = []
        for group_id in group_ids:
            cur.execute("""
                SELECT
                    schedule.day_of_week_and_date,
                    schedule.time_range,
                    disciplines.name_discipline,
                    schedule.lesson_type,
                    teachers.full_name,
                    audiences.room_number
                FROM
                    schedule
                    JOIN disciplines ON schedule.id_discipline = disciplines.id_discipline
                    JOIN teachers ON schedule.id_teacher = teachers.id_teacher
                    JOIN audiences ON schedule.id_audience = audiences.id_audience
                WHERE
                    schedule.id_group = %s
            """, (group_id[0],))
            schedule_rows.extend(cur.fetchall())
        return schedule_rows
    else:
        return None

async def send_group_schedule(chat_id, group_name):
    await bot.send_message(chat_id, "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∂–¥–∏—Ç–µ.")
    group_schedule = await search_group_schedule(group_name)
    if group_schedule:
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã(-—ã) '{group_name}':\n"
        for row in group_schedule:
            response += f"------------------------------------------------------------\n"
            response += f"üìÖ {row[0]}\n"
            response += f"üïí {row[1]}\n"
            if row[2] != "!":
                response += f"üìö {row[2]}\n"
            if row[3] != "." and row[3] != "!":
                response += f"üß™ {row[3]}\n"
            if row[4] != "!":
                response += f"üë®üèª‚Äçüíº {row[4]}\n"
            if row[5] != "!":
                response += f"üèõ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {row[5]}\n"

        for i in range(0, len(response), 4000):
            await bot.send_message(chat_id, response[i:i + 4000])
    else:
        await bot.send_message(chat_id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø(-—ã) —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{group_name}', –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@bot.message_handler(func=lambda message : message.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', )
async def settings(message) :
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    changegr = telebot.types.KeyboardButton('üë®üèª‚Äçüéì–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
    changentf = telebot.types.KeyboardButton('üîî–°–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    changeweek = telebot.types.KeyboardButton('‚ÜîÔ∏è–°–º–µ–Ω–∏—Ç—å –Ω–µ–¥–µ–ª—é –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é')
    menu = telebot.types.KeyboardButton('/menu')
    markup.add(changegr, changentf)
    markup.add(changeweek, menu)
    await bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=markup)


@bot.message_handler(func=lambda message : message.text == 'üîî–°–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', )
async def notifications(message) :
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    onehour = telebot.types.KeyboardButton('–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —á–∞—Å –¥–æ')
    oneday = telebot.types.KeyboardButton('–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ')
    hourday = telebot.types.KeyboardButton('–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —á–∞—Å –∏ –∑–∞ –¥–µ–Ω—å –¥–æ')
    stopall = telebot.types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    menu = telebot.types.KeyboardButton('/menu')
    markup.add(onehour, oneday)
    markup.add(hourday, stopall)
    markup.add(menu)
    await bot.send_message(message.chat.id, '''–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ –ø–µ—Ä–≤–æ–π –ø–∞—Ä–µ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
–£—á—Ç–∏—Ç–µ —ç—Ç–æ!''', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìñ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def lessons(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    mylessons = telebot.types.KeyboardButton('üóì–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    alllessons = telebot.types.KeyboardButton('üìö–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞')
    menu = telebot.types.KeyboardButton('/menu')
    markup.add(mylessons, alllessons)
    markup.add(menu)
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', reply_markup=markup)

def searchteacher(lastname) :
    cur.execute("SELECT id_teacher FROM teachers WHERE full_name LIKE %s", (f"%{lastname}%",))
    teacher_id = cur.fetchone()
    if teacher_id :
        cur.execute("""
            SELECT
                groups.name_group,
                schedule.day_of_week_and_date,
                schedule.time_range,
                disciplines.name_discipline,
                schedule.lesson_type,
                audiences.room_number
            FROM
                schedule
                JOIN groups ON schedule.id_group = groups.id_group
                JOIN disciplines ON schedule.id_discipline = disciplines.id_discipline
                JOIN audiences ON schedule.id_audience = audiences.id_audience
            WHERE
                schedule.id_teacher = %s
        """, (teacher_id[0],))
        schedule_rows = cur.fetchall()
        return schedule_rows
    else :
        return None


@bot.message_handler(func=lambda message : message.text == 'üë®üèª‚Äçüíº–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
async def find_teacher(message) :
    user_state[message.chat.id] = {'waiting_for_lastname' : True}
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")


@bot.message_handler(
    func=lambda message : message.chat.id in user_state and user_state[message.chat.id].get('waiting_for_lastname'))
async def process_teacher_name(message) :
    teacher_lastname = message.text
    if teacher_lastname == "!" :
        await bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        del user_state[message.chat.id]
        return

    teacher_lastname = message.text
    teacher_schedule = searchteacher(teacher_lastname)
    if teacher_schedule :
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_lastname}:\n"
        for row in teacher_schedule :
            response += f"------------------------------------------------------------\nüë´ {row[0]}\n"
            response += f"üìÖ {row[1]}\n"
            response += f"üïí–í—Ä–µ–º—è: {row[2]}\n"
            response += f"üìö–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {row[3]}\n"
            if row[4] != "." :
                response += f"üß™–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {row[4]}\n"
            response += f"üèõ–ê—É–¥–∏—Ç–æ—Ä–∏—è: {row[5]}\n"
        await bot.send_message(message.chat.id, response)
    else :
        await bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    del user_state[message.chat.id]


@bot.message_handler(func=lambda message : message.text == 'üÜò–ü–æ–º–æ—â—å')
async def help(message) :
    await bot.send_message(message.chat.id,
                           f''' ‚ùó –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –±–æ—Ç–∞.
ü§ñ–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤ –±–µ—Å–µ–¥–∞—Ö –∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
–í —Ä–∞–∑–¥–µ–ª–µ \"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìñ\" –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ \"–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\" –∏ \"–û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–¥–∂–∞\".
\"–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì\" —è–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –≤–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.
–ö–Ω–æ–ø–∫–∞ \"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å üë®üèª‚Äçüíº\" –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø–æ –§–ò–û.
–í —Ä–∞–∑–¥–µ–ª–µ \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è\" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–Ω–æ–ø–∫–∏, –∏–∑–º–µ–Ω—è—é—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É, –∏–∑–º–µ–Ω—è—é—â–∏–µ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µüîÑ –Ω–µ–¥–µ–ª–∏ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏).
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –±–æ—Ç –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è, –∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ.
–í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–µ–¥–µ–ª—è —Å–º–µ–Ω—è–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
üéâ –£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!''')


@bot.message_handler(func=lambda message : True)
async def handle_messages(message) :
    if message.text not in ['üìñ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üë®üèª‚Äçüíº–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', 'üÜò–ü–æ–º–æ—â—å', 'üóì–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                            'üìö–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞', 'üë®üèª‚Äçüéì–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', '‚ÜîÔ∏è–°–º–µ–Ω–∏—Ç—å –Ω–µ–¥–µ–ª—é –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é',
                            '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —á–∞—Å –¥–æ', '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ', '–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ —á–∞—Å –∏ –∑–∞ –¥–µ–Ω—å –¥–æ',
                            '–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'] :
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        lessons0 = telebot.types.KeyboardButton('üìñ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
        settings0 = telebot.types.KeyboardButton('‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        findname0 = telebot.types.KeyboardButton('üë®üèª‚Äçüíº–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
        help0 = telebot.types.KeyboardButton('üÜò–ü–æ–º–æ—â—å')
        markup.add(lessons0, settings0)
        markup.add(findname0, help0)
        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
                               reply_markup=markup)


async def main() :
    await bot.polling(none_stop=True)


if __name__ == "__main__" :
    asyncio.run(main())